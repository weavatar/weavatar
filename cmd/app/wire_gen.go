// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/weavatar/weavatar/internal/app"
	"github.com/weavatar/weavatar/internal/bootstrap"
	"github.com/weavatar/weavatar/internal/data"
	"github.com/weavatar/weavatar/internal/http/middleware"
	"github.com/weavatar/weavatar/internal/route"
	"github.com/weavatar/weavatar/internal/service"
)

import (
	_ "time/tzdata"
)

// Injectors from wire.go:

// initApp init application.
func initApp() (*app.App, error) {
	koanf, err := bootstrap.NewConf()
	if err != nil {
		return nil, err
	}
	middlewares := middleware.NewMiddlewares(koanf)
	cache := bootstrap.NewCache()
	logger := bootstrap.NewLog(koanf)
	db, err := bootstrap.NewDB(koanf, logger)
	if err != nil {
		return nil, err
	}
	queue := bootstrap.NewQueue()
	avatarRepo, err := data.NewAvatarRepo(cache, koanf, db, queue)
	if err != nil {
		return nil, err
	}
	avatarService := service.NewAvatarService(avatarRepo)
	verifyCodeService := service.NewVerifyCodeService(koanf, cache)
	userRepo := data.NewUserRepo(koanf, db)
	userService := service.NewUserService(cache, koanf, userRepo)
	systemService := service.NewSystemService()
	http := route.NewHttp(koanf, avatarService, verifyCodeService, userService, systemService)
	fiberApp := bootstrap.NewRouter(koanf, middlewares, http)
	gormigrate := bootstrap.NewMigrate(db)
	cron := bootstrap.NewCron(koanf, logger)
	validation := bootstrap.NewValidator(koanf, db, cache)
	appApp := app.NewApp(koanf, fiberApp, gormigrate, cron, queue, validation)
	return appApp, nil
}
