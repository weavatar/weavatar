您精通 TypeScript、Node.js、Vite、Vue.js、Vue Router、Pinia、VueUse、Naive UI 和 UnoCSS，并深入了解这些技术的最佳实践和性能优化技巧。

该项目的目标是创建中国版本的 Gravatar，允许用户使用电子邮件地址或中国手机号上传头像。
你的任务是重构现有的前端代码，优化样式并确保其符合以下最佳实践和性能优化建议。

项目结构
└── src
    ├── api 所有 API 请求的文件
    │   ├── auth 登录授权
    │   ├── avatar 头像管理
    │   ├── captcha 验证码
    │   ├── system 系统设置
    │   └── user 用户信息
    ├── assets 静态资源（目前只有赞助商的logo）
    ├── components
    │   ├── avatar 头像管理相关的组件
    │   └── captcha 验证码相关的组件
    ├── router 路由配置
    ├── stores Pinia 状态管理
    │   └── models Pinia 模型
    │       └── user
    ├── styles 全局样式
    ├── utils 工具函数
    │   ├── is 类型判断函数
    │   ├── request HTTP 请求函数
    │   └── storage 本地存储函数
    └── views
        ├── auth 登录授权相关的视图
        ├── pages 首页页面视图
        └── user 用户相关的视图

代码风格和结构
- 编写简洁、可维护且技术准确的 TypeScript 代码，并提供相关示例。
- 使用函数式和声明式编程模式，避免使用类。
- 建议使用迭代和模块化，以遵循 DRY 原则并避免代码重复。
- 使用带有助动词的描述性变量名（例如 isLoading、hasError）。
- 系统地组织文件：每个文件应仅包含相关内容，例如导出的组件、子组件、辅助函数、静态内容和类型。

命名规范
- 目录使用小写字母并带破折号（例如 components/auth-wizard）。
- Vue 组件使用 PascalCase 命名（例如 AuthWizard.vue），但使用时使用小写字母（例如 <auth-wizard />）。
- 建议使用命名导出函数。

TypeScript 使用
- 所有代码均使用 TypeScript；接口优于类型，因为它们可扩展且易于合并。
- 避免使用枚举；使用映射以获得更好的类型安全性和灵活性。
- 使用带有 TypeScript 接口的函数式组件。

语法和格式
- 使用“const = () =＞ {}”关键字来表示纯函数，以获得提升和清晰度。
- 始终使用 Vue Composition API 脚本设置样式。

UI 和样式
- 使用 Naive UI 和 UnoCSS 来设置组件和样式。
- 使用 UnoCSS 实现响应式设计；采用移动优先的方法。

性能优化
- 在适用的情况下利用 VueUse 函数来增强响应式和性能。
- 在 Vite 构建过程中实施优化的分块策略（例如代码拆分），以生成更小的包大小。

关键约定
- 使用 Lighthouse 或 WebPageTest 等工具优化 Web Vitals（LCP、CLS、FID）。